name: Static Analysis on Changed Charts

on:
  pull_request:

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.0  # Adjust to your required Helm version

      - name: Install Dependencies
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          pip install checkov

      - name: Get Changed Files
        id: changes
        run: |
          # Fetch the base branch to compare
          #git fetch origin "${{ github.base_ref }}" --depth=1
          # Get the list of changed addons-*-appset.yaml and values.yaml files
          first_commit="${{ github.event.pull_request.base.sha || github.event.before }}"
          last_commit="${{ github.event.pull_request.head.sha || github.event.after }}"

          CHANGED_APPSET_FILES=$(git diff --name-only "$first_commit" "$last_commit" -- 'bootstrap/control-plane/addons/addons-*-appset.yaml')
          CHANGED_VALUES_FILES=$(git diff --name-only "$first_commit" "$last_commit" -- 'environments/**/addons/*/values.yaml')

          echo "Changed appset files: $CHANGED_APPSET_FILES"
          echo "Changed values files: $CHANGED_VALUES_FILES"

          # Save the lists as outputs
          echo "appset_files=$CHANGED_APPSET_FILES" >> $GITHUB_OUTPUT
          echo "values_files=$CHANGED_VALUES_FILES" >> $GITHUB_OUTPUT

      - name: Identify Affected Charts
        id: charts
        run: |
          declare -A CHARTS=()

          # From changed appset files
          for file in ${{ steps.changes.outputs.appset_files }}; do
            # Extract chart name from file name: addons-${chartName}-appset.yaml
            filename=$(basename "$file")
            chartName=$(echo "$filename" | sed -e 's/^addons-\(.*\)-appset\.yaml$/\1/')
            CHARTS["$chartName"]=1
          done

          # From changed values files
          for file in ${{ steps.changes.outputs.values_files }}; do
            # Extract chart name from path: environments/.../addons/{chartName}/values.yaml
            chartName=$(basename $(dirname "$file"))
            CHARTS["$chartName"]=1
          done

          # Export the list of affected charts
          echo "affected_charts=${!CHARTS[@]}" >> $GITHUB_OUTPUT
          echo "Affected charts: ${!CHARTS[@]}"

      - name: Extract Chart Info from addons-*-appset.yaml
        id: chart_info
        run: |
          declare -A CHART_REPOS=()
          declare -A CHART_VERSIONS=()

          for chart in ${{ steps.charts.outputs.affected_charts }}; do
            appset_file="bootstrap/control-plane/addons/addons-${chart}-appset.yaml"
            if [ -f "$appset_file" ]; then
              echo "Processing $appset_file for chart $chart"

              # Extract values using yq
              addonChartRepository=$(yq e '.spec.generators[0].merge.generators[0].clusters.values.addonChartRepository' "$appset_file")
              addonChartVersion=$(yq e '.spec.generators[0].merge.generators[0].clusters.values.addonChartVersion' "$appset_file")

              # Store the values
              CHART_REPOS["$chart"]="$addonChartRepository"
              CHART_VERSIONS["$chart"]="$addonChartVersion"
            else
              echo "Appset file $appset_file not found for chart $chart"
              exit 1  # Fail the build if the appset file is missing
            fi
          done

          # Export the chart info
          echo "chart_names=$(echo ${!CHART_REPOS[@]})" >> $GITHUB_OUTPUT
          echo "chart_repos=$(echo ${CHART_REPOS[@]})" >> $GITHUB_OUTPUT
          echo "chart_versions=$(echo ${CHART_VERSIONS[@]})" >> $GITHUB_OUTPUT

      - name: Merge values.yaml Files and Render Charts
        run: |
          mkdir -p rendered_charts

          chart_names=(${{ steps.chart_info.outputs.chart_names }})
          chart_repos=(${{ steps.chart_info.outputs.chart_repos }})
          chart_versions=(${{ steps.chart_info.outputs.chart_versions }})

          for index in "${!chart_names[@]}"; do
            chart="${chart_names[$index]}"
            repo="${chart_repos[$index]}"
            version="${chart_versions[$index]}"

            echo "Processing chart: $chart"
            echo "Repository: $repo"
            echo "Version: $version"

            # Add the Helm repository
            if [[ ${repo} == "oci://"* ]]; then
              echo "Repository is an OCI registry...";
              mkdir -p "${chart}-repo"
              helm pull "${repo}/${chart}" --version "${version}" --destination "${chart}-repo" --untar;
            else
              echo "Repository is standard..."
              helm repo add "${chart}-repo" "$repo"
              helm repo update
            fi


            # Build the list of values files
            VALUES_FILES=""
            DEFAULT_VALUES="environments/default/addons/$chart/values.yaml"
            DEV_VALUES="environments/dev/addons/$chart/values.yaml"
            PROD_VALUES="environments/prod/addons/$chart/values.yaml"
            ENV_VALUES=""
            CLUSTER_VALUES=""

            # Include default values if exists
            if [ -f "$DEFAULT_VALUES" ]; then
              VALUES_FILES="$VALUES_FILES -f $DEFAULT_VALUES"
            fi

            # Determine environment values file
            if echo "${{ steps.changes.outputs.values_files }}" | grep -q "$PROD_VALUES"; then
              ENV_VALUES="$PROD_VALUES"
              echo "Using prod environment values for $chart"
            elif [ -f "$DEV_VALUES" ]; then
              ENV_VALUES="$DEV_VALUES"
              echo "Using dev environment values for $chart"
            fi

            if [ -n "$ENV_VALUES" ]; then
              VALUES_FILES="$VALUES_FILES -f $ENV_VALUES"
            fi

            # Include cluster values if exists
            if [ -f "$CLUSTER_VALUES" ]; then
              VALUES_FILES="$VALUES_FILES -f $CLUSTER_VALUES"
            fi

            # Render the Helm chart
            helm template "$chart" "${chart}-repo/$chart" \
              --version "$version" --namespace "$chart" \
              $VALUES_FILES > "rendered_charts/${chart}-rendered.yaml"

            # Render the Helm chart and split it out into multiple files
            #helm template "$chart" "${chart}-repo/$chart" \
            #  --version "$version" --namespace "$chart" \
            #  $VALUES_FILES | awk 'BEGIN {n=0} /^---/ {n++} {print > "temp_chart_doc_" n ".yaml"}'

            # Process each file
            #for file in temp_chart_doc_*.yaml; do
            #    # Extract the kind and name of the resource using yq
            #    kind=$(yq eval '.kind' "$file")
            #    name=$(yq eval '.metadata.name' "$file")

            #    # Check that both kind and name are non-empty before writing to file
            #    if [ -n "$kind" ] && [ -n "$name" ]; then
            #      mv "$file" "rendered_charts/${kind}-${name}.yaml"
            #    fi
            #done
          done


      - name: Run Checkov
        run: |
          for file in rendered_charts/*.yaml; do
            echo "Running Checkov on $file"
            checkov -f "$file" --soft-fail --quiet
          done
      - name: kube-score check
        uses: piraces/kube-score-ga@v0.1.3
        with:
          manifests-folders: 'rendered_charts/*.yaml'
          ignore-exit-code: true
